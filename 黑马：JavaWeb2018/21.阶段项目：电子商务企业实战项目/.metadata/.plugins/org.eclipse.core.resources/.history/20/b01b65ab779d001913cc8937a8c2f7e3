package cn.itcast.store.web.servlet;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import cn.itcast.store.domain.Cart;
import cn.itcast.store.domain.CartItem;
import cn.itcast.store.domain.Order;
import cn.itcast.store.domain.OrderItem;
import cn.itcast.store.domain.PageModel;
import cn.itcast.store.domain.User;
import cn.itcast.store.service.OrderService;
import cn.itcast.store.service.serviceImpl.OrderServiceImpl;
import cn.itcast.store.utils.PaymentUtil;
import cn.itcast.store.utils.UUIDUtils;
import cn.itcast.store.web.base.BaseServlet;

/**
 * Servlet implementation class OrderServlet
 */
public class OrderServlet extends BaseServlet
{
	// 保存订单
	public String saveOrder(HttpServletRequest req, HttpServletResponse resp) throws Exception
	{
		// 确认用户的登录状态
		User user = (User) req.getSession().getAttribute("loginUser");
		if (user == null)
		{
			req.setAttribute("msg", "请登录后再下单");
			return "/jsp/info.jsp";
		}
		// 获取购物车
		Cart cart = (Cart) req.getSession().getAttribute("cart");
		// 创建订单对象，为订单对象赋值
		Order order = new Order();
		order.setOid(UUIDUtils.getId());
		order.setOrdertime(new Date());
		order.setTotal(cart.getTotal());
		order.setState(1);
		order.setUser(user);
		// 便利购物车的同时，创建订单项
		for (CartItem cartItem : cart.getCartItems())
		{
			OrderItem orderItem = new OrderItem();
			orderItem.setItemId(UUIDUtils.getId());
			orderItem.setQuantity(cartItem.getNum());
			orderItem.setTotal(cartItem.getSubTotal());
			orderItem.setProduct(cartItem.getProduct());

			// 设置订单和订单项的关联，从程序的角度体现订单和订单项的对应关系
			orderItem.setOrder(order);
			order.getList().add(orderItem);
		}

		// 调用业务层功能：保存订单
		OrderService orderService = new OrderServiceImpl();
		orderService.saveOrder(order);
		// 清空购物车
		cart.clearCart();
		// 将订单放入request
		req.setAttribute("order", order);
		// 转发/jsp/order_info.jsp
		return "/jsp/order_info.jsp";
	}

	public String findMyOrdersWithPage(HttpServletRequest req, HttpServletResponse resp) throws Exception
	{
		// 获取用户信息
		User user = (User) req.getSession().getAttribute("loginUser");
		// 获取当前页
		int curNum = Integer.parseInt(req.getParameter("num"));
		// 调用业务层功能：查询当前用户订单信息，返回PageModel
		OrderService orderService = new OrderServiceImpl();
		// select * from orders where uid=? limit ?, ?
		// pm上携带：分页参数、url、当前用户的当前页的订单（集合），每笔订单上对应的订单项以及订单项上的商品信息
		PageModel pm = orderService.findMyOrdersWithPage(user, curNum);
		// 将PageModel放入request
		req.setAttribute("page", pm);
		// 转发到/jsp/order_list.jsp
		return "/jsp/order_list.jsp";
	}

	public String findOrderByOid(HttpServletRequest req, HttpServletResponse resp) throws Exception
	{
		// 获取订单oid
		String oid = req.getParameter("oid");
		// 调用业务层功能
		OrderService orderService = new OrderServiceImpl();
		Order order = orderService.findOrderByOid(oid);
		// 将订单放入request
		req.setAttribute("order", order);
		// 转发到订单详情页
		return "/jsp/order_info.jsp";
	}

	public String payOrder(HttpServletRequest req, HttpServletResponse resp) throws Exception
	{
		// 获取订单oid及收货人地址、姓名、电话、银行
		String oid = req.getParameter("oid");
		String address = req.getParameter("address");
		String telephone = req.getParameter("telephone");
		String name = req.getParameter("name");
		String pd_FrpId = req.getParameter("pd_FrpId");
		// 更新订单的收货人地址、姓名、电话
		OrderService orderService = new OrderServiceImpl();
		Order order = orderService.findOrderByOid(oid);
		order.setName(name);
		order.setTelephone(telephone);
		order.setAddress(address);
		orderService.updateOrder(order);
		
		// 向易宝支付发送参数
		// 把付款所需要的参数准备好:
		String p0_Cmd = "Buy";
		// 商户编号
		String p1_MerId = "10001126856";
		// 订单编号
		String p2_Order = oid;
		// 金额
		String p3_Amt = "0.01";
		String p4_Cur = "CNY";
		String p5_Pid = "";
		String p6_Pcat = "";
		String p7_Pdesc = "";
		// 接受响应参数的Servlet
		String p8_Url = "http://localhost:8080/store_v5/OrderServlet?method=callBack";
		String p9_SAF = "";
		String pa_MP = "";
		String pr_NeedResponse = "1";
		// 公司的秘钥
		String keyValue = "69cl522AV6q613Ii4W6u8K6XuW8vM1N6bFgyv769220IuYe9u37N4y7rI4Pl";

		// 调用易宝的加密算法,对所有数据进行加密,返回电子签名
		String hmac = PaymentUtil.buildHmac(p0_Cmd, p1_MerId, p2_Order, p3_Amt, p4_Cur, p5_Pid, p6_Pcat, p7_Pdesc,
				p8_Url, p9_SAF, pa_MP, pd_FrpId, pr_NeedResponse, keyValue);

		StringBuffer sb = new StringBuffer("https://www.yeepay.com/app-merchant-proxy/node?");
		sb.append("p0_Cmd=").append(p0_Cmd).append("&");
		sb.append("p1_MerId=").append(p1_MerId).append("&");
		sb.append("p2_Order=").append(p2_Order).append("&");
		sb.append("p3_Amt=").append(p3_Amt).append("&");
		sb.append("p4_Cur=").append(p4_Cur).append("&");
		sb.append("p5_Pid=").append(p5_Pid).append("&");
		sb.append("p6_Pcat=").append(p6_Pcat).append("&");
		sb.append("p7_Pdesc=").append(p7_Pdesc).append("&");
		sb.append("p8_Url=").append(p8_Url).append("&");
		sb.append("p9_SAF=").append(p9_SAF).append("&");
		sb.append("pa_MP=").append(pa_MP).append("&");
		sb.append("pd_FrpId=").append(pd_FrpId).append("&");
		sb.append("pr_NeedResponse=").append(pr_NeedResponse).append("&");
		sb.append("hmac=").append(hmac);

		System.out.println(sb.toString());
		// 使用重定向：
		response.sendRedirect(sb.toString());
		return "/jsp/order_info.jsp";
	}
}
